import numpy as np
import matplotlib.pyplot as plt

class HurstExponentCalculator:
    def __init__(self, time_series_data, window_sizes):
        self.time_series_data = time_series_data
        self.window_sizes = window_sizes
        self.hurst_exponent = None

    def calc_rms(self, x, scale):
        shape = (x.shape[0] // scale, scale)
        X = np.lib.stride_tricks.as_strided(x, shape=shape)
        scale_ax = np.arange(scale)
        rms = np.zeros(X.shape[0])
        for e, xcut in enumerate(X):
            coeff = np.polyfit(scale_ax, xcut, 1)
            xfit = np.polyval(coeff, scale_ax)
            rms[e] = np.sqrt(np.mean((xcut - xfit)**2))
        return rms

    def dfa(self, show=False):
        y = np.cumsum(self.time_series_data - np.mean(self.time_series_data))
        fluct = np.zeros(len(self.window_sizes))
        for e, sc in enumerate(self.window_sizes):
            fluct[e] = np.mean(np.sqrt(self.calc_rms(y, sc)**2))
        coeff = np.polyfit(np.log2(self.window_sizes), np.log2(fluct), 1)
        self.hurst_exponent = coeff[0]

        if show:
            fluctfit = 2**np.polyval(coeff, np.log2(self.window_sizes))
            plt.loglog(self.window_sizes, fluct, 'bo')
            plt.loglog(self.window_sizes, fluctfit, 'r', label=r'$\alpha$ = %0.2f' % coeff[0])
            plt.title('DFA')
            plt.xlabel(r'$\log_{2}$(time window)')
            plt.ylabel(r'$\log_{2}$<F(t)>')
            plt.legend()
            plt.show()

    def get_hurst_exponent(self):
        if self.hurst_exponent is None:
            raise ValueError("Hurst exponent has not been calculated. Run dfa() method first.")
        elif self.hurst_exponent > 1:
            raise ValueError("Hurst exponent cannot be greater than 1.")
        
        return self.hurst_exponent


# Example Usage:
time_series_data = [-0.21595540231759117, -0.439241289739362, -0.48041742516274616, -0.4096683508153457, -0.3399673423748977, -0.27283729430847864, -0.17641933719208286, -0.0928209846386756, -0.06371626118308032, -0.03081118713663272, 0.07798851944362273, 0.21121562985813327, 0.2522242375971563, 0.195231143256944, 0.15942364165502718, 0.2177820560654351, 0.2998916832185052, 0.30023020584168936, 0.22080507485956483, 0.15452714820714022, 0.15558902839034705, 0.18038283347408032, 0.16221212142631083, 0.10285406423958271, 0.05846880886636997, 0.051805508637470056, 0.041308209798165345, -0.01096252946786854,-0.07797250116803257, -0.1062386055964043, -0.09203851947216951, -0.0784061857389596, -0.08780995831398217, -0.10233570273195003, -0.11081794465359832, -0.13024321790146232, -0.16634403238751164, -0.19224064203855737, -0.18858324270809976, -0.17204877533620308, -0.15914077352553796, -0.13483402712404435, -0.08937332711162722, -0.05410370399901374, -0.05580043536807251, -0.058642031515751, -0.008960566767744201, 0.06931422168389145, 0.08967184519460746, 0.02830164682511443, -0.030872338328698797, -0.009894878570138255, 0.0682225347813534, 0.14982105931094147, 0.25008986527883503, 0.3944242144913929, 0.4982728949207925, 0.4174809987567563, 0.13923540542457968, -0.15770943128394171, -0.2765756377006687, -0.19408994941756347, -0.04814865006757873, 0.025928782355170647, 0.0031908087029325414, -0.06540486851520523, -0.1384609741850596, -0.20986323451449274, -0.270403974741275, -0.2810347834979437, -0.20749340130224994, -0.0764252623895069, 0.030057105325750306, 0.05449542806110189, 0.025765667429335525, 0.01919715110877511, 0.06616402878116114, 0.1331065860950955, 0.1809248475592037, 0.19796208947386418, 0.1703429649826334, 0.08723740660776465, 0.011909611137420272, 0.07060106932550564, 0.28351531033610017, 0.4564814137861002, 0.3588429137659436, 0.008429748830137473, -0.3220604735865224, -0.40183687329343926, -0.2665704377623313, -0.12548675717396396, -0.11460505999279211, -0.18795862465873872, -0.22270509763933127, -0.17858839182101835, -0.12578700957452235, -0.12729451462131292]
# [-0.1583530513134028, -0.2021899528766742, -0.22793952715012603, -0.2227692444456421, -0.20569198746745168, -0.2003622327633773, -0.20187601840390235, -0.18110981848010205, -0.11714946058380767, -0.014061837852217983, 0.10701655290948646, 0.21065804658931858, 0.24587931574672134, 0.17837368005621468, 0.04310797270747218, -0.06319789198003863, -0.07516581089250396, -0.03039925118495994, -0.012455998377650173, -0.03345324303427406, -0.02240622460774152, 0.06655605208229477, 0.1908499212790533, 0.28839782975501976, 0.35622275644211676, 0.4112680900583139, 0.40945987134868717, 0.2751786415665019]

# np.random.randn(1000)  # Replace with your actual time series data
window_sizes = np.array([10,11,12,14,16,18,20,23,25,28,32,39,43,47])  # Replace with your desired window sizes
hurst_calculator = HurstExponentCalculator(time_series_data, window_sizes)
hurst_calculator.dfa(show=False)
hurst_value = hurst_calculator.get_hurst_exponent()
print("Hurst Exponent:", hurst_value)
